"use strict";exports.id=945,exports.ids=[945],exports.modules={31945:(e,t,s)=>{s.d(t,{q:()=>Q,d:()=>J});var r=s(36845),a=s(80279),n=s(15764),i=s(32442);let u=(0,a.af)("business_types",{businessTypeId:(0,n.Vj)("business_type_id").primaryKey().defaultRandom(),businessTypeName:(0,i.L7)("business_type_name",{length:256}).notNull(),status:(0,i.L7)("status").$type().default("active")}),o=(0,r.hA)({listBusinessTypes:r.$y.query(async({ctx:e})=>await e.db.select().from(u))});var c=s(77472),d=s(96478);let l=(0,a.af)("users",{userId:(0,n.Vj)("user_id").primaryKey().defaultRandom(),fullName:(0,i.L7)("full_name",{length:256}).notNull(),phoneNumber:(0,i.L7)("traveller_phone",{length:256}).notNull(),password:(0,i.L7)("password",{length:256}).notNull(),businessName:(0,i.L7)("business_name",{length:256}).notNull(),businessTypeId:(0,n.Vj)("business_type_id").references(()=>u.businessTypeId),businessLocation:(0,i.L7)("business_location",{length:256}).notNull(),dateJoined:(0,d.hT)("date_joined",{mode:"string"}),status:(0,i.L7)("status").$type().default("active")});var m=s(65145),g=s(67096),y=s.n(g),p=s(53100);let I=(0,r.hA)({signup:r.$y.input(c.z.object({fullName:c.z.string().min(2),phoneNumber:c.z.string().min(2),password:c.z.string().min(6),businessName:c.z.string().min(2),businessType:c.z.string(),businessLocation:c.z.string().min(2)})).mutation(async({ctx:e,input:t})=>{let s=(0,p.un)(t.phoneNumber);if((await e.db.select().from(l).where((0,m.eq)(l.phoneNumber,s))).length>0)return{status:"fail",message:"Phone number already exists"};let r=await y().genSalt(),a=await y().hash(t.password,r);return await e.db.insert(l).values({fullName:t.fullName,phoneNumber:s,password:a,businessName:t.businessName,businessTypeId:t.businessType,businessLocation:t.businessLocation,dateJoined:new Date().toISOString().slice(0,19).replace("T"," ")}),{status:"success",message:"Account succesfully created"}}),login:r.$y.input(c.z.object({phoneNumber:c.z.string().min(2),password:c.z.string().min(6)})).mutation(async({ctx:e,input:t})=>{let{password:s,phoneNumber:r}=t,a=(0,p.un)(r),n=await e.db.select().from(l).where((0,m.eq)(l.phoneNumber,a));return n.length?await y().compare(s,n[0].password)?{status:"success",message:"Login succesfull, redirecting to dashboard..."}:{status:"fail",message:"Incorrect password"}:{status:"fail",message:"Phone number is not registered"}})});var f=s(37692);let h=(0,a.af)("customers",{customerId:(0,n.Vj)("customer_id").primaryKey().defaultRandom(),userId:(0,n.Vj)("user_id").references(()=>l.userId),customerName:(0,i.L7)("full_name",{length:256}).notNull(),customerContact:(0,i.L7)("customer_contact",{length:256}),status:(0,i.L7)("status").$type().default("active"),kraPin:(0,i.L7)("kra_pin",{length:256})}),q=(0,a.af)("sales",{salesId:(0,n.Vj)("sales_id").primaryKey().defaultRandom(),userId:(0,n.Vj)("user_id").references(()=>l.userId),salesDate:(0,d.hT)("sales_date",{mode:"string"}),status:(0,i.L7)("status").$type().default("active"),paymentOption:(0,i.L7)("payment_option").$type().default("cash"),totalCost:(0,f.gH)("totalCost",{precision:10,scale:2}),customerId:(0,n.Vj)("customer_id").references(()=>h.customerId)});var w=s(78425),b=s(73520),z=s(50984),v=s(19791),x=s(49543);let D=(0,a.af)("categories",{categoryId:(0,n.Vj)("category_id").primaryKey().defaultRandom(),userId:(0,n.Vj)("user_id").references(()=>l.userId),categoryName:(0,i.L7)("category_name",{length:256}).notNull(),description:(0,x.fL)("category_description"),status:(0,i.L7)("status").$type().default("active")}),_=(0,a.af)("items",{itemId:(0,n.Vj)("item_id").primaryKey().defaultRandom(),userId:(0,n.Vj)("user_id").references(()=>l.userId),itemName:(0,i.L7)("item_name",{length:256}).notNull(),unitOfMeasure:(0,i.L7)("unit_of_measure",{length:256}).notNull(),categoryId:(0,n.Vj)("category_id").references(()=>D.categoryId),reorderLevel:(0,v._L)("reorder_level"),status:(0,i.L7)("status").$type().default("active")}),j=(0,a.af)("inventory",{inventoryId:(0,n.Vj)("inventory_id").primaryKey().defaultRandom(),itemId:(0,n.Vj)("item_id").references(()=>_.itemId),quantityAdded:(0,v._L)("quantity_added"),quantityInStock:(0,v._L)("quantity_in_stock").notNull().default(0),buyingPrice:(0,f.gH)("buying_price",{precision:10,scale:2}),sellingPrice:(0,f.gH)("selling_price",{precision:10,scale:2}),lastUpdated:(0,d.hT)("last_updated",{mode:"string"}),status:(0,i.L7)("status").$type().default("active")}),$=(0,a.af)("sales_items",{salesItemId:(0,n.Vj)("sales_item_id").primaryKey().defaultRandom(),salesId:(0,n.Vj)("sales_id").references(()=>q.salesId),itemId:(0,n.Vj)("item_id").references(()=>_.itemId),inventoryId:(0,n.Vj)("inventory_id").references(()=>j.inventoryId),salesQuantity:(0,v._L)("sales_quantity"),unitPrice:(0,f.gH)("unit_price",{precision:10,scale:2}),totalPrice:(0,f.gH)("total_price",{precision:10,scale:2}),status:(0,i.L7)("status").$type().default("active")}),S=(0,a.af)("credit_and_debt",{transactionId:(0,n.Vj)("credit_and_debt_id").primaryKey().defaultRandom(),userId:(0,n.Vj)("user_id").references(()=>l.userId),salesId:(0,n.Vj)("sales_id").references(()=>q.salesId),transactionDate:(0,d.hT)("transaction_date",{mode:"string"}),customerId:(0,n.Vj)("customer_id").references(()=>h.customerId),transactionAmount:(0,f.gH)("transaction_amount",{precision:10,scale:2}),transactionType:(0,i.L7)("transaction_type").$type(),status:(0,i.L7)("status").$type().default("active")}),N=(0,r.hA)({listSales:r.$y.input(c.z.object({startDate:c.z.string().optional(),endDate:c.z.string().optional(),paymentMethod:c.z.enum(["cash","credit","mpesa"]).optional(),customerId:c.z.string().optional(),page:c.z.string().optional()})).query(async({ctx:e,input:t})=>{let s=t.startDate??new Date(2010,0,1).toISOString(),r=t.endDate??new Date().toISOString(),a=[(0,m.vX)(q.salesDate,s,r)];return t.paymentMethod&&a.push((0,m.eq)(q.paymentOption,t.paymentMethod)),t.customerId&&a.push((0,m.eq)(q.customerId,t.customerId)),{status:"success",sales:await e.db.select().from(q).where((0,m.xD)(...a,(0,m.eq)(q.status,"active"))).leftJoin(h,(0,m.eq)(q.customerId,h.customerId)).orderBy((0,w.C)(q.salesDate)).execute()}}),listPaginatedSales:r.$y.input(c.z.object({startDate:c.z.string().optional(),endDate:c.z.string().optional(),paymentMethod:c.z.enum(["cash","credit","mpesa"]).optional(),customerId:c.z.string().optional(),page:c.z.string()})).query(async({ctx:e,input:t})=>{let s=t.startDate??new Date(2010,0,1).toISOString(),r=t.endDate??new Date().toISOString(),a=[(0,m.vX)(q.salesDate,s,r)];t.paymentMethod&&a.push((0,m.eq)(q.paymentOption,t.paymentMethod)),t.customerId&&a.push((0,m.eq)(q.customerId,t.customerId));let n=10*+t.page,i=e.db.select().from(q).where((0,m.xD)(...a,(0,m.eq)(q.status,"active"))).leftJoin(h,(0,m.eq)(q.customerId,h.customerId)).orderBy((0,w.C)(q.salesDate)).limit(10).offset(n),u=e.db.select({value:(0,b.QX)()}).from(q).where((0,m.xD)(...a,(0,m.eq)(q.status,"active"))),[o,c]=await Promise.all([i.execute(),u.execute()]);return{sales:o,totalCount:c[0].value}}),deleteSale:r.$y.input(c.z.object({salesId:c.z.string().min(2,{message:"Sales Id is required"})})).mutation(async({ctx:e,input:t})=>{let{salesId:s}=t;if(!(await e.db.select().from(q).where((0,m.xD)((0,m.eq)(q.salesId,s),(0,m.eq)(q.status,"active")))).length)return{status:"error",message:"Record not found"};let r=await e.db.update(q).set({status:"deleted"}).where((0,m.eq)(q.salesId,s)).returning();if(!r.length)return{status:"error",message:"Failed to delete, please try again"};if(!(await e.db.update($).set({status:"deleted"}).where((0,m.eq)($.salesId,r[0].salesId)).returning()).length)return{status:"error",message:"Error deleting associated items,please contact customer care"};if("credit"===r[0].paymentOption){let t=r[0].salesId;return(await e.db.update(S).set({status:"deleted"}).where((0,m.eq)(S.salesId,t))).length?{status:"success",message:"Sales succesfully deleted"}:{status:"error",message:"Error updating credit entry, please contact customer care"}}return{status:"success",message:"Sales succesfully deleted!"}}),listMonthlySales:r.$y.input(c.z.object({startDate:c.z.string().optional(),endDate:c.z.string().optional()})).query(async({ctx:e,input:t})=>{let s=new Date;s.setFullYear(s.getFullYear()-1);let r=t.startDate??s.toISOString(),a=t.endDate??new Date().toISOString();return await e.db.select({month:(0,z.i6)`to_char(${q.salesDate}, 'YYYY-MM')`,total:(0,z.i6)`sum(${q.totalCost})`}).from(q).where((0,m.vX)(q.salesDate,r,a)).groupBy((0,z.i6)`to_char(${q.salesDate}, 'YYYY-MM')`).orderBy((0,z.i6)`to_char(${q.salesDate}, 'YYYY-MM') ASC`)}),newSales:r.$y.input(c.z.object({userId:c.z.string().min(1,{message:"user Id is required"}),salesDate:c.z.string(),paymentOption:c.z.enum(["cash","mpesa","credit"]).default("cash"),customer:c.z.string(),items:c.z.array(c.z.object({itemId:c.z.string().min(2,{message:"invalid itemId"}),quantity:c.z.number().min(1,{message:"Quantity should be greater than 1"})}))})).mutation(async({ctx:e,input:t})=>await e.db.transaction(async s=>{try{let r;let{customer:a,items:n,paymentOption:i,salesDate:u,userId:o}=t,c=await s.select().from(l).where((0,m.eq)(l.userId,o));if(!c.length)return{status:"error",message:"User not found"};if("credit"===i){let t=await e.db.select().from(h).where((0,m.xD)((0,m.eq)(h.customerId,a),(0,m.eq)(h.userId,o)));if(!t.length)return{status:"error",message:"Customer not found"};r=t[0].customerId}console.log("customerId",r);let d=0,g=[];for(let t of n){let{itemId:r,quantity:a}=t,n=await e.db.select().from(j).where((0,m.xD)((0,m.eq)(j.itemId,r),(0,m.eq)(j.status,"active"),(0,m.gt)(j.quantityInStock,0))).orderBy((0,w.d)(j.lastUpdated));if(!n.length)return{status:"error",message:`No inventory records for item ${r}`};let i=n.reduce((e,t)=>t.quantityInStock+e,0);if(!i||i<a)return{status:"error",message:`Insufficient quantity available for item ${r}`};let u=a,o=0;for(let e of n)if(e.quantityInStock>0){let t=Math.min(u,e.quantityInStock);e.quantityInStock-=t,u-=t;let a=t*Number(e.sellingPrice);if(o+=a,await s.update(j).set({quantityInStock:e.quantityInStock}).where((0,m.eq)(j.inventoryId,e.inventoryId)),g.push({itemId:r,inventoryId:e.inventoryId,salesQuantity:t,unitPrice:e.sellingPrice,totalPrice:String(a),status:"active"}),0===u)break}d+=o}let y={customerId:r,paymentOption:i,salesDate:u,status:"active",totalCost:String(d),userId:c[0].userId},p=await e.db.insert(q).values(y).returning({salesId:q.salesId});if(!p.length)return{status:"error",message:"Failed to record sales, check and try again"};let I=p[0].salesId;for(let e of g)await s.insert($).values({...e,salesId:I});if("credit"===i){let e={customerId:r,salesId:I,transactionAmount:String(d),userId:o,transactionDate:u,transactionType:"credit"};await s.insert(S).values(e)}return{status:"success",message:"Sales succesfully recorded"}}catch(e){return console.error(e),{status:"Error",message:"Error recording sales"}}}))}),C=(0,a.af)("expenses",{expenseId:(0,n.Vj)("expense_id").primaryKey().defaultRandom(),userId:(0,n.Vj)("user_id").references(()=>l.userId),expenseAmount:(0,f.gH)("expense_amount",{precision:10,scale:2}),expenseRecipient:(0,i.L7)("expense_recipient",{length:256}),expenseReference:(0,i.L7)("expense_reference",{length:256}),expenseDescription:(0,x.fL)("expense_description"),paymenDate:(0,d.hT)("payment_date",{mode:"string"}),status:(0,i.L7)("status").$type().default("active")}),L=c.z.object({userId:c.z.string().min(2,{message:"UserId is required"}),expenseAmount:c.z.string(),expenseRecipient:c.z.string().min(2,{message:"Recipient is required"}),expenseReference:c.z.string().min(2,{message:"Reference is required"}),expenseDescription:c.z.string().nullable(),paymenDate:c.z.string().min(2,{message:"Date is required"})}),P=L.omit({userId:!0,paymenDate:!0}).extend({expenseId:c.z.string()}),V=(0,r.hA)({createExpense:r.$y.input(L).mutation(async({ctx:e,input:t})=>{let{expenseAmount:s,expenseRecipient:r,expenseReference:a,paymenDate:n,userId:i,expenseDescription:u}=t,{db:o}=e;return await o.select().from(l).where((0,m.xD)((0,m.eq)(l.userId,i),(0,m.eq)(l.status,"active")))?(await o.insert(C).values({expenseAmount:s,expenseDescription:u,expenseRecipient:r,expenseReference:a,paymenDate:n,userId:i}),{status:"success",message:"Expense succesfully recorded"}):{status:"error",message:"User not found"}}),getExpenseDetails:r.$y.input(c.z.object({expenseId:c.z.string()})).query(async({ctx:e,input:t})=>{let{expenseId:s}=t,{db:r}=e,a=await r.select().from(C).where((0,m.xD)((0,m.eq)(C.expenseId,s),(0,m.eq)(C.status,"active")));return a.length?{status:"success",expense:a[0]}:{status:"error",message:"Expense not found"}}),updateExpense:r.$y.input(P).mutation(async({ctx:e,input:t})=>{let{expenseAmount:s,expenseDescription:r,expenseId:a,expenseRecipient:n,expenseReference:i}=t,{db:u}=e;return(await u.select().from(C).where((0,m.xD)((0,m.eq)(C.expenseId,a),(0,m.eq)(C.status,"active")))).length?(await u.update(C).set({expenseAmount:s,expenseDescription:r,expenseRecipient:n,expenseReference:i}).where((0,m.eq)(C.expenseId,a)),{status:"success",message:"expense updated succesfully"}):{status:"error",message:"Expense record not found"}}),deleteExpense:r.$y.input(c.z.object({expenseId:c.z.string()})).mutation(async({ctx:e,input:t})=>{let{expenseId:s}=t,{db:r}=e;return(await r.select().from(C).where((0,m.xD)((0,m.eq)(C.expenseId,s),(0,m.eq)(C.status,"active")))).length?(await r.update(C).set({status:"deleted"}).where((0,m.eq)(C.expenseId,s)),{status:"success",message:"Record deleted succefsully"}):{status:"error",message:"Expense not found"}}),listExpenses:r.$y.input(c.z.object({startDate:c.z.string().optional(),endDate:c.z.string().optional()})).query(async({ctx:e,input:t})=>({status:"success",expenses:await e.db.select().from(C).where((0,m.vX)(C.paymenDate,t.startDate??new Date(2010,0,1).toISOString(),t.endDate??new Date().toISOString()))})),listPaginatedExpense:r.$y.input(c.z.object({userId:c.z.string(),page:c.z.string()})).query(async({ctx:e,input:t})=>{let{page:s,userId:r}=t,{db:a}=e,n=a.select().from(C).where((0,m.xD)((0,m.eq)(C.userId,r),(0,m.eq)(C.status,"active"))).limit(10).offset(10*+s),i=a.select({count:(0,b.QX)()}).from(C).where((0,m.xD)((0,m.eq)(C.userId,r),(0,m.eq)(C.status,"active"))),[u,o]=await Promise.all([n,i]);return{expenses:u,count:o[0].count}})}),O=c.z.object({customerName:c.z.string().min(2,{message:"Valid customer name is required"}),customerContact:c.z.string().min(10,{message:"Phone number should be atleast 10 characters"}),kraPin:c.z.string().optional()}),A=(0,r.hA)({listCustomers:r.$y.input(c.z.object({userId:c.z.string(),page:c.z.string().optional()})).query(async({ctx:e,input:t})=>{let{userId:s,page:r}=t,a=10*Number(r??""),n=e.db.select().from(h).where((0,m.xD)((0,m.eq)(h.userId,s),(0,m.eq)(h.status,"active"))).limit(10).offset(a),i=e.db.select({value:(0,b.QX)()}).from(h).where((0,m.xD)((0,m.eq)(h.userId,s),(0,m.eq)(h.status,"active"))),[u,o]=await Promise.all([n.execute(),i.execute()]);return{customers:u,count:o[0].value}}),createCustomer:r.$y.input(O.extend({userId:c.z.string()})).mutation(async({ctx:e,input:t})=>{let{customerContact:s,customerName:r,kraPin:a,userId:n}=t;return(await e.db.insert(h).values({customerName:r,customerContact:s,kraPin:a,userId:n}).returning()).length?{status:"success",message:"Customer succesfully added"}:{status:"error",message:"Error adding user"}}),editCustomer:r.$y.input(O.extend({customerId:c.z.string()})).mutation(async({ctx:e,input:t})=>{let{customerId:s,customerName:r,kraPin:a,customerContact:n}=t,{db:i}=e;return(await i.select().from(h).where((0,m.xD)((0,m.eq)(h.customerId,s),(0,m.eq)(h.status,"active")))).length?(await i.update(h).set({customerName:r,kraPin:a,customerContact:n}).where((0,m.eq)(h.customerId,s)),{status:"success",message:"Customer Information succesfully updated"}):{status:"error",message:"Customer not found"}}),deleteCustomer:r.$y.input(c.z.object({customerId:c.z.string()})).mutation(async({ctx:e,input:t})=>{let{customerId:s}=t,{db:r}=e;return(await r.select().from(h).where((0,m.eq)(h.customerId,s))).length?(await r.update(h).set({status:"deleted"}).where((0,m.eq)(h.customerId,s)),{status:"success",message:"Customer deleted succesfully"}):{status:"error",message:"Customer not found"}}),getCustomer:r.$y.input(c.z.object({customerId:c.z.string()})).query(async({ctx:e,input:t})=>{let{customerId:s}=t,{db:r}=e,a=await r.select().from(h).where((0,m.eq)(h.customerId,s));return a.length?{status:"success",cusromer:a[0]}:{status:"error",message:"Customer not found"}})}),k=c.z.object({itemName:c.z.string().min(2,{message:"Item name is required"}),unitOfmeasure:c.z.string().min(2,{message:"Unit Of Measure is required"}),categoryId:c.z.string().min(2,{message:"Category is required"}),reorderLevel:c.z.string().optional()}),M=c.z.object({itemId:c.z.string().min(2,{message:"Item id is required"}),itemName:c.z.string().min(2,{message:"Item name is required"}),unitOfmeasure:c.z.string().min(2,{message:"Unit Of Measure is required"}),reorderLevel:c.z.string().optional()}),R=(0,r.hA)({createItem:r.$y.input(k.extend({userId:c.z.string()})).mutation(async({ctx:e,input:t})=>{let{userId:s,itemName:r,categoryId:a,reorderLevel:n,unitOfmeasure:i}=t,{db:u}=e,o=await u.select().from(l).where((0,m.eq)(l.userId,s));if(!o)return{status:"error",message:"User not found"};let c=await u.select().from(D).where((0,m.eq)(D.categoryId,a));if(!c)return{status:"error",message:"Category not found"};let d={itemName:r,unitOfMeasure:i,categoryId:c[0].categoryId,userId:o[0].userId,reorderLevel:Number(n)};return await u.insert(_).values(d),{status:"success",message:"Item succesfully added"}}),updateItem:r.$y.input(M).mutation(async({ctx:e,input:t})=>{let{itemId:s,itemName:r,unitOfmeasure:a,reorderLevel:n}=t,{db:i}=e;return(await i.select().from(_).where((0,m.xD)((0,m.eq)(_.itemId,s),(0,m.eq)(_.status,"active")))).length?(await i.update(_).set({itemName:r,unitOfMeasure:a,reorderLevel:Number(n)}).where((0,m.eq)(_.itemId,s)),{status:"success",message:"Item updated succesfully"}):{status:"error",message:"Item not found"}}),deleteItem:r.$y.input(c.z.object({itemId:c.z.string().min(2,{message:"ItemId is required"})})).mutation(async({ctx:e,input:t})=>{let{itemId:s}=t,{db:r}=e;return(await r.select().from(_).where((0,m.xD)((0,m.eq)(_.itemId,s),(0,m.eq)(_.status,"active")))).length?(await r.update(_).set({status:"deleted"}).where((0,m.eq)(_.itemId,s)),{status:"success",message:"Item succesfully deleted"}):{status:"error",message:"Item not found"}}),listItems:r.$y.input(c.z.object({userId:c.z.string()})).query(async({ctx:e,input:t})=>{let{userId:s}=t;return await e.db.select().from(_).where((0,m.xD)((0,m.eq)(_.userId,s),(0,m.eq)(_.status,"active")))}),listItemsByCategory:r.$y.input(c.z.object({categoryId:c.z.string().optional(),page:c.z.string()})).query(async({ctx:e,input:t})=>{let{categoryId:s,page:r}=t,{db:a}=e,n=[(0,m.eq)(_.status,"active")];s&&"all"!==s&&n.push((0,m.eq)(_.categoryId,s));let i=a.select().from(_).where((0,m.xD)(...n)).leftJoin(D,(0,m.eq)(_.categoryId,D.categoryId)).limit(10).offset(10*+r),u=a.select({value:(0,b.QX)()}).from(_).where((0,m.xD)(...n)),[o,c]=await Promise.all([i,u]);return{items:o,count:c[0].value}}),getItemDetails:r.$y.input(c.z.object({itemId:c.z.string().min(1,{message:"Item id is required"})})).query(async({ctx:e,input:t})=>{let{itemId:s}=t,{db:r}=e,a=await r.select().from(_).where((0,m.xD)((0,m.eq)(_.itemId,s),(0,m.eq)(_.status,"active")));return a.length?{status:"success",item:a[0]}:{status:"error",message:"Item not found"}}),quantityInStock:r.$y.input(c.z.object({itemId:c.z.string()})).query(async({ctx:e,input:t})=>{let{itemId:s}=t,r=await e.db.select({quantityInStock:j.quantityInStock,uom:_.unitOfMeasure,sellingprice:j.sellingPrice}).from(j).leftJoin(_,(0,m.eq)(j.itemId,_.itemId)).where((0,m.xD)((0,m.eq)(j.itemId,s),(0,m.eq)(j.status,"active"),(0,m.gt)(j.quantityInStock,0))).orderBy((0,w.C)(j.lastUpdated)),a=r.reduce((e,t)=>t.quantityInStock+e,0);return{uom:r[0].uom,sellingPrice:r[r.length-1].sellingprice,quantityInStock:a}})}),T=(0,r.hA)({listSalesItems:r.$y.input(c.z.object({salesId:c.z.string().min(1,{message:"SalesId is required"})})).query(async({ctx:e,input:t})=>{try{let{salesId:s}=t,{db:r}=e,a=await r.select().from(q).where((0,m.eq)(q.salesId,s));if(!a.length)return{status:"error",message:"No sales record found"};let n=await r.select().from($).where((0,m.eq)($.salesId,s)).leftJoin(j,(0,m.eq)(j.inventoryId,$.inventoryId)).leftJoin(_,(0,m.eq)(_.itemId,$.itemId));if(!n.length)return{status:"error",message:"No sales Items found"};let i=[];if(null!==a[0].customerId){let e=a[0].customerId;i=await r.select().from(h).where((0,m.eq)(h.customerId,e))}let u=[];return"credit"===a[0].paymentOption&&(u=await r.select().from(S).where((0,m.eq)(S.salesId,s))),{status:"success",sales:a[0],customer:i[0],credit:u[0],salesItemsAndInventory:n}}catch(e){return console.error(e),{status:"error",message:"Server error, please contact support"}}})}),E=c.z.object({categoryName:c.z.string().min(2,{message:"Category name is required"}),description:c.z.string().nullable()}),Y=(0,r.hA)({createCategory:r.$y.input(E.extend({userId:c.z.string().min(2,{message:"UserId is required"})})).mutation(async({ctx:e,input:t})=>{let{categoryName:s,description:r,userId:a}=t,{db:n}=e;return(await n.select().from(l).where((0,m.xD)((0,m.eq)(l.userId,a),(0,m.eq)(l.status,"active")))).length?(await n.insert(D).values({categoryName:s,description:r,userId:a}),{status:"success",message:"Category succesfully added"}):{status:"error",message:"User not found"}}),updateCategory:r.$y.input(E.extend({categoryId:c.z.string().min(2,{message:"CategoryId is required"})})).mutation(async({ctx:e,input:t})=>{let{categoryId:s,categoryName:r,description:a}=t,{db:n}=e;return(await n.select().from(D).where((0,m.xD)((0,m.eq)(D.categoryId,s),(0,m.eq)(D.status,"active")))).length?(await n.update(D).set({categoryName:r,description:a}).where((0,m.eq)(D.categoryId,s)),{status:"success",message:"Category succesfully updated!"}):{status:"error",message:"Category not found"}}),deleteCategory:r.$y.input(c.z.object({categoryId:c.z.string().min(2,{message:"CategoryId is required"})})).mutation(async({ctx:e,input:t})=>{let{categoryId:s}=t,{db:r}=e;return(await r.select().from(D).where((0,m.xD)((0,m.eq)(D.categoryId,s),(0,m.eq)(D.status,"active")))).length?(await r.update(D).set({status:"deleted"}).where((0,m.eq)(D.categoryId,s)),{status:"success",message:"Category succesfully deleted"}):{status:"error",message:"Category not found"}}),listCategories:r.$y.input(c.z.object({userId:c.z.string()})).query(async({ctx:e,input:t})=>{let{userId:s}=t,{db:r}=e;return await r.select().from(D).where((0,m.eq)(D.userId,s))}),listPaginatedCategories:r.$y.input(c.z.object({userId:c.z.string(),page:c.z.string()})).query(async({ctx:e,input:t})=>{let{page:s,userId:r}=t,{db:a}=e,n=10*Number(s),i=a.select().from(D).where((0,m.xD)((0,m.eq)(D.userId,r),(0,m.eq)(D.status,"active"))).limit(10).offset(n),u=a.select({count:(0,b.QX)()}).from(D).where((0,m.xD)((0,m.eq)(D.userId,r),(0,m.eq)(D.status,"active"))),[o,c]=await Promise.all([i.execute(),u.execute()]);return{categories:o,totalCount:c[0].count}}),getCategoryDetails:r.$y.input(c.z.object({categoryId:c.z.string().min(1,{message:"Category Id is required"})})).query(async({ctx:e,input:t})=>{let{categoryId:s}=t,{db:r}=e,a=await r.select().from(D).where((0,m.xD)((0,m.eq)(D.categoryId,s),(0,m.eq)(D.status,"active")));return a.length?{status:"success",category:a[0]}:{status:"error",message:"Category not found"}})}),U=c.z.object({itemId:c.z.string().min(2,{message:"ItemId is required"}),quantityAdded:c.z.string().min(1,{message:"Atleast 1 is required"}),buyingPrice:c.z.string().min(1,{message:"Value should be more than 1"}),sellingPrice:c.z.string().min(1,{message:"Value should be more than 1"}),lastUpdated:c.z.string()}),X=(0,r.hA)({addInventory:r.$y.input(U).mutation(async({ctx:e,input:t})=>{let{buyingPrice:s,itemId:r,lastUpdated:a,quantityAdded:n,sellingPrice:i}=t,{db:u}=e,o=await u.select().from(_).where((0,m.xD)((0,m.eq)(_.itemId,r),(0,m.eq)(_.status,"active")));if(!o.length)return{status:"error",message:"Item not found"};let c={buyingPrice:String(s),itemId:o[0].itemId,lastUpdated:a,quantityAdded:+n,quantityInStock:+n,sellingPrice:String(i)};return await u.insert(j).values(c),{status:"success",message:"Inventory succesfully added"}}),listInventory:r.$y.input(c.z.object({itemId:c.z.string(),page:c.z.string()})).query(async({ctx:e,input:t})=>{let{itemId:s,page:r}=t,{db:a}=e,n=10*Number(r),i=await a.select().from(_).where((0,m.xD)((0,m.eq)(_.itemId,s),(0,m.eq)(_.status,"active")));if(!i.length)return{status:"error",message:"Item not found"};let u=a.select().from(j).where((0,m.xD)((0,m.eq)(j.itemId,s),(0,m.eq)(j.status,"active"))).limit(10).offset(n),o=a.select({count:(0,b.QX)()}).from(j).where((0,m.xD)((0,m.eq)(j.itemId,s),(0,m.eq)(j.status,"active"))),[c,d]=await Promise.all([u,o]);return{status:"success",inventory:c,item:i[0],count:d[0].count}})}),K=(0,r.hA)({listCreditDebt:r.$y.input(c.z.object({userId:c.z.string(),page:c.z.string(),type:c.z.enum(["credit","debt","all"])})).query(async({ctx:e,input:t})=>{let{userId:s,page:r,type:a}=t,{db:n}=e,i=10*Number(r),u=await n.select().from(l).where((0,m.xD)((0,m.eq)(l.userId,s),(0,m.eq)(l.status,"active")));if(!u.length)return{status:"Error",message:"user not found"};let o=[(0,m.eq)(S.status,"active"),(0,m.eq)(S.userId,u[0].userId)];"credit"===a&&o.push((0,m.eq)(S.transactionType,"credit")),"debt"===a&&o.push((0,m.eq)(S.transactionType,"debt"));let c=n.select().from(S).where((0,m.xD)(...o)).limit(10).offset(i).leftJoin(h,(0,m.eq)(h.customerId,S.customerId)),d=n.select({count:(0,b.QX)()}).from(S).where((0,m.xD)(...o)),[g,y]=await Promise.all([c,d]);return{status:"success",creditDebt:g,count:y[0].count}})}),Q=(0,r.hA)({businessTypes:o,authentication:I,sales:N,expense:V,customers:A,items:R,salesItems:T,categories:Y,inventory:X,creditDebt:K}),J=(0,r.bn)(Q)},36845:(e,t,s)=>{s.d(t,{bn:()=>g,uw:()=>l,hA:()=>y,$y:()=>p});var r=s(55274),a=s(36161);let n=process.env.POSTGRES_URL,i=(0,r.Z)(n,{prepare:!1}),u=(0,a.t)(i);var o=s(33091),c=s(89835),d=s(77472);let l=async e=>({db:u,...e}),m=o.rN.context().create({transformer:c.ZP,errorFormatter:({shape:e,error:t})=>({...e,data:{...e.data,zodError:t.cause instanceof d.jm?t.cause.flatten():null}})}),g=m.createCallerFactory,y=m.router,p=m.procedure}};